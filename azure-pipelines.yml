trigger:
  batch: true
  branches:
    include:
      - dev

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  PAT: $(GitHubPersonalAccessToken) 

stages:
  - stage: Source
    displayName: Source code management
    jobs:
    - job: Format_and_Release
      displayName: Format source code and publish docker-compose required files to GitHub Release.
      pool:
        vmImage: windows-latest
      steps:
        # Allow scripts to access the system token
        - checkout: self
          persistCredentials: true
        # Install CSharpier
        - task: DotNetCoreCLI@2
          inputs:
            command: 'custom'
            custom: 'tool'
            arguments: 'install -g csharpier'
        # Run CSarpier to format the source code
        - task: DotNetCoreCLI@2
          inputs:
            command: 'custom'
            custom: 'csharpier'
            arguments: '.'
        # Copy EPlusActivities.API/appsettings.json to Settings/EPlusActivites.API 
        - task: CopyFiles@2
          inputs:
            SourceFolder: 'EPlusActivities.API'
            Contents: 'appsettings.json'
            TargetFolder: 'Settings/EPlusActivities.API'
            OverWrite: true
        # Copy FileService/appsettings.json to Settings/FileService 
        - task: CopyFiles@2
          inputs:
            SourceFolder: 'FileService'
            Contents: 'appsettings.json'
            TargetFolder: 'Settings/FileService'
            OverWrite: true
        # Before git commands, be sure your account's default identity is set
        - task: CmdLine@2
          continueOnError: true
          inputs:
            script: |
              git config --global user.email "zhangyue.dev@outlook.com"
              git config --global user.name "kamasylvia"
        # Push formatted code back to remote repository
        - task: CmdLine@2
          continueOnError: true
          inputs:
            script: |
              git checkout $(Build.SourceBranchName)
              git add -A
              git commit --allow-empty -m "Format source code with CSharpier [skip ci]"
              git push
        # Push to GitHub
        - task: gitsync@1
          inputs:
            GitRepoUrl: 'https://github.com/$(PAT)@github.com/EPlusActivities.API.git'
        # Copy required files to Artiface
        - task: CopyFiles@2
          inputs:
            Contents: |
              docker-compose.yml
              Settings/**
              Nginx/**
              html/**
              Dapr/**
              README.md
            TargetFolder: '$(build.artifactstagingdirectory)'
            CleanTargetFolder: true
            OverWrite: true
        # Achieve files
        # - task: ArchiveFiles@2
        #   inputs:
        #     rootFolderOrFile: '$(Build.SourcesDirectory)/ArchiveFolder'
        #     includeRootFolder: true
        #     archiveType: 'zip'
        #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        #     replaceExistingArchive: true

        # Publish
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'docker-compose'
            publishLocation: 'Container'
            
        # GitHub Release
        # - task: GitHubRelease@1
        #   inputs:
        #     gitHubConnection: 'KamasylviaOAuth'
        #     repositoryName: '$(Build.Repository.Name)'
        #     action: 'create'
        #     target: '$(Build.SourceVersion)'
        #     tagSource: 'gitTag'
        #     tagPattern: '[Rr]elease-v[1-9]*\S*' # required 
        #     assets: '$(Build.ArtifactStagingDirectory)/*.zip'
        #     # isDraft: true
        #     changeLogCompareToRelease: 'lastFullRelease'
        #     changeLogType: 'commitBased'
  - stage: Deploy
    displayName: Deploy to production
    jobs:
    - job: Containerization
      displayName: Build image and push to DockerHub
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: DockerCompose@0
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'DockerHub'
            dockerComposeFile: '**/docker-compose.yml'
            additionalDockerComposeFiles: 'docker-compose.override.yml'
            action: 'Build services'
            includeLatestTag: true
            nopIfNoDockerComposeFile: true
        - task: DockerCompose@0
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'DockerHub'
            dockerComposeFile: '**/docker-compose.yml'
            additionalDockerComposeFiles: 'docker-compose.override.yml'
            action: 'Push services'
            includeLatestTag: true
            nopIfNoDockerComposeFile: true
