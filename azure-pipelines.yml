# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  batch: true
  branches:
    include:
      - dev

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
  - stage: Source
    displayName: Source code management
    jobs:
    - job: Account
      displayName: Set your account's default identity.
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self
          persistCredentials: true
        - task: CmdLine@2
          continueOnError: true
          inputs:
            script: |
              git config --global user.email "zhangyue.dev@outlook.com"
              git config --global user.name "kamasylvia"
    - job: Release
      displayName: GitHub Release.
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self
          persistCredentials: true
        - task: CopyFiles@2
          inputs:
            Contents: |
              docker-compose.yml
              Settings/**
              Nginx/**
              html/**
              README.md
            TargetFolder: 'ArchiveFolder'
            CleanTargetFolder: true
            OverWrite: true
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/ArchiveFolder'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true
        - task: GitHubRelease@1
          inputs:
            gitHubConnection: 'KamasylviaOAuth'
            repositoryName: '$(Build.Repository.Name)'
            action: 'create'
            target: '$(Build.SourceVersion)'
            tagSource: 'gitTag'
            tagPattern: '[Rr]elease-v[1-9]*\S*' 
            assets: '$(Build.ArtifactStagingDirectory)/*.zip'
            isDraft: true
            changeLogCompareToRelease: 'lastFullRelease'
            changeLogType: 'commitBased'
    - job: Format
      displayName: Format source code
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self
          persistCredentials: true
        - task: DotNetCoreCLI@2
          inputs:
            command: 'custom'
            custom: 'tool'
            arguments: 'install -g csharpier'
        - task: DotNetCoreCLI@2
          inputs:
            command: 'custom'
            custom: 'csharpier'
            arguments: '.'
        - task: CmdLine@2
          continueOnError: true
          inputs:
            script: |
              git checkout $(Build.SourceBranchName)
              git add -A
              git commit --allow-empty -m "Format source code with CSharpier [skip ci]"
    - job: Sync
      displayName: Push modified code back to GitHub repository
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self
          persistCredentials: true
        - task: CmdLine@2
          continueOnError: true
          inputs:
            script: |
              git checkout $(Build.SourceBranchName)
              git push
  - stage: Deploy
    displayName: Deploy to production
    jobs:
    - job: Containerization
      displayName: Build image and push to DockerHub
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: DockerCompose@0
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'DockerHub'
            dockerComposeFile: '**/docker-compose.yml'
            additionalDockerComposeFiles: 'docker-compose.override.yml'
            action: 'Build services'
            includeLatestTag: true
            nopIfNoDockerComposeFile: true
        - task: DockerCompose@0
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'DockerHub'
            dockerComposeFile: '**/docker-compose.yml'
            additionalDockerComposeFiles: 'docker-compose.override.yml'
            action: 'Push services'
            includeLatestTag: true
            nopIfNoDockerComposeFile: true
